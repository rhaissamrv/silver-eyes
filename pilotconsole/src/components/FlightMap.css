@import './Defaults.css';

.flightmap-container {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;

    width: 100%;
    height: 100%;
}

.menu {
    grid-row-start: 1;
    grid-row-end: -1;
    grid-column-start: 1;
    grid-column-end: -1;

    margin: 0;
    padding: 0;

    height: 100%;
}

.menu-container {
    margin: 0 !important;
    padding: 0 !important;

    height: 100%;

    border-radius: var(--border-radius-small);

    display: grid;
    grid-template-columns: 4.125rem 1fr 1fr 1.125rem;
    /* grid-template-rows: 1.125rem 4.35rem auto auto; */
    grid-template-rows: 1.125rem min-content auto auto;
    gap: 0;
}

.spacer {
    width: 0rem;
}

.position-map {
    grid-row-start: 1;
    grid-row-end: -1;
    grid-column-start: 1;
    grid-column-end: -1;

    /* border: 3px solid red; */
    width: 100%;
    height: 100%;

    z-index: 0;
    /* background-color: chartreuse; */
    overflow: hidden;
}

.mapid {
    /* height: max-content; */
    height: 100%;
}

/* 46vh is a temp happypath solution for the
time being. This needs to be refactored
to get size and then responsively set the size of the
map element. Requires an event listener/useRef? and an
await for componentDidMount.
var height = document.getElementById('foo').offsetHeight
console.log(document.getElementById('id').getBoundingClientRect())
-VDR. */

.leaflet-container {
    width: 100%;
    height: 37vh;
    height: 55vh;
    /* height: 40vh; */
    /* height: 100%; */
}

.lat-long {
    text-align: right;
    z-index: 1;
    grid-row-start: 1;
    grid-row-end: 2;
    grid-column-start: 3;
    grid-column-end: -1;
    /* background-color: var(--identify-me); */
    padding: var(--padding-tiny);
}

.form-container {
    /* "starting coordinates" */

    z-index: 1;
    grid-row-start: 2;
    grid-row-end: 3;
    grid-column-start: 2;
    grid-column-end: 4;

    /* margin: 0;
    padding: 0;
    padding-top: var(padding-tiny); */
    background-color: var(--ghost-transparent);
    /* background-color: red; */
}

input[name='latitude'],
input[name='longitude'] {
    border: 0px solid white;
}

.form-group {
    /* background: royalblue; */
    padding: var(--padding-small);
    padding-left: 0px;
    padding-right: 0px;
    padding-top: 0px;
    display: grid;
    margin: 0;
    gap: 0px !important;
    width: 100%;
    grid-template-columns: repeat(2, 1fr) auto;
}

.form-lat {
    grid-column: 1;
    /* width: max-content; */
    width: 100%;

    margin-right: 0px;
    padding-left: var(--padding);
    padding-right: 0px;
    /* background: red; */
    justify-self: end;
}

.form-long {
    grid-column: 2;
    /* padding-left: var(--padding-tiny); */
    /* width: max-content; */
    width: 100%;

    margin-left: 0px;
    margin-right: 0px;
    padding-left: 0px;
    padding-right: 0px;

    justify-self: start;
    /* background: greenyellow; */
    border-left: 1px solid var(--ghost-hover);
}
/* 
.form-long:before {
    content: '';
    background: black;
    position: absolute;
    bottom: 0;
    left: 0;
    height: 50%;
    width: 1px;
} */

.form-lat > input {
    /* padding: 0; */
    width: 100%;
    border-top-right-radius: 0px !important;
    border-bottom-right-radius: 0px !important;
}
.form-long > input {
    width: 100%;
    border-top-left-radius: 0px !important;
    border-bottom-left-radius: 0px !important;
}

.lat-long-label {
    margin: 0px;
    padding: 0px;
    padding-left: var(--padding-small);
    text-align: left;
}

.form-submit {
    grid-column: 3;

    align-self: center;
    justify-self: start;

    width: 100%;

    margin: 0;
    padding: 0;
    padding-left: var(--padding-tiny);
    padding-top: var(--padding-tiny);
    padding-right: var(--padding-small);
    /* background: blue; */
}

.form-submit > button {
    width: 100%;
}

.form-item {
    display: inline-block;
    margin: 0;
    padding: 0;
    margin-right: var(--padding-tiny);
    padding-right: var(--padding-tiny);
}

.map-button {
    /* padding-left: var(--padding-tiny); */
    /* border: 4px solid red; */
}

.recording-container {
    /* recording options */
    text-align: right;
    padding: 0;
    margin: 0;

    z-index: 1;

    grid-row-start: 4;
    grid-row-end: -1;
    grid-column-start: 2;
    grid-column-end: 4;
    align-self: end;

    display: grid;
    grid-template-columns: auto auto;
}

.recording-background {
    grid-column: 2;

    width: max-content;
    justify-self: end;

    padding: var(--padding-small);
    padding-bottom: var(--padding-tiny);
    background-color: var(--ghost-transparent);
    /* border: 1px solid var(--quiet); */
    margin-bottom: var(--padding);
}

.recording-button {
    display: inline-block;
    margin: 0;
    margin-left: var(--padding-tiny);
}

.leaflet-bottom {
    visibility: hidden;
}

.leaflet-control-zoom-in,
.leaflet-control-zoom-out {
    font-size: 1.25rem !important;
    line-height: 1.75rem !important;
    text-align: center !important;
    margin-top: 0.2rem;
    border-radius: var(--border-radius-tiny) !important;
}

.leaflet-tile > img {
    border-width: unset;
    margin: 0 !important;
    padding: 0 !important;
    border-radius: 0 !important;
    border-bottom-left-radius: 0 !important;
    border-bottom-right-radius: 0 !important;
    border-top-left-radius: 0 !important;
    border-top-left-radius: 0 !important;
}

.leaflet-tile {
    border-width: unset;
    margin: 0 !important;
    padding: 0 !important;
    border-radius: 0 !important;
    border-bottom-left-radius: 0 !important;
    border-bottom-right-radius: 0 !important;
    border-top-left-radius: 0 !important;
    border-top-left-radius: 0 !important;
}
